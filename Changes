package com.example.demo;

import com.example.controller.AgentController;
import com.example.model.Agent;
import com.example.service.AgentService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(AgentController.class)
public class AgentControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AgentService agentService;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void testAddAgent() throws Exception {
        Agent agent = new Agent();
        agent.setAgentId(1234);
        agent.setName("John Doe");
        agent.setContactInfo("123456789");
        // No policies assigned initially
        agent.setPolicies(Collections.emptyList());

        when(agentService.addAgent(agent)).thenReturn(agent);

        mockMvc.perform(post("/agent")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(agent)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.agentId").value(1234));
    }

    @Test
    public void testFindAgentById() throws Exception {
        Agent agent = new Agent();
        agent.setAgentId(1234);
        agent.setName("John Doe");
        agent.setContactInfo("123456789");
        agent.setPolicies(Collections.emptyList());

        when(agentService.findAgentbyId(1234)).thenReturn(agent);

        mockMvc.perform(get("/agent/1234")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isFound())
                .andExpect(jsonPath("$.agentId").value(1234))
                .andExpect(jsonPath("$.name").value("John Doe"));
    }

    @Test
    public void testGetAllInsurance() throws Exception {
        Agent agent1 = new Agent();
        agent1.setAgentId(1);
        agent1.setName("Agent1");
        agent1.setContactInfo("12345678");
        agent1.setPolicies(Collections.emptyList());

        Agent agent2 = new Agent();
        agent2.setAgentId(2);
        agent2.setName("Agent2");
        agent2.setContactInfo("87654321");
        agent2.setPolicies(Collections.emptyList());

        List<Agent> agents = Arrays.asList(agent1, agent2);

        when(agentService.getAllAgent()).thenReturn(agents);

        mockMvc.perform(get("/agent")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].agentId").value(1))
                .andExpect(jsonPath("$[0].name").value("Agent1"))
                .andExpect(jsonPath("$[0].contactInfo").value("12345678"))
                .andExpect(jsonPath("$[1].agentId").value(2))
                .andExpect(jsonPath("$[1].name").value("Agent2"))
                .andExpect(jsonPath("$[1].contactInfo").value("87654321"));
    }

    @Test
    public void testUpdateAgent() throws Exception {
        Agent agent = new Agent();
        agent.setAgentId(1234);
        agent.setName("John Doe");
        agent.setContactInfo("123456789");
        agent.setPolicies(Collections.emptyList());

        when(agentService.updateInsurance(agent)).thenReturn(agent);

        mockMvc.perform(put("/agent")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(agent)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.agentId").value(1234))
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.contactInfo").value("123456789"));
    }

    @Test
    public void testDeleteAgent() throws Exception {
        Agent agent = new Agent();
        agent.setAgentId(1234);
        agent.setName("John Doe");
        agent.setContactInfo("123456789");
        agent.setPolicies(Collections.emptyList());

        when(agentService.deleteAgent(1234)).thenReturn(agent);

        mockMvc.perform(delete("/agent/1234")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.agentId").value(1234))
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.contactInfo").value("123456789"));
    }
}


package com.example.demo;

import com.example.dao.AgentRepository;
import com.example.exception.AgentException;
import com.example.model.Agent;
import com.example.service.AgentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class AgentServiceTest {

    @Mock
    private AgentRepository agentRepository;

    @InjectMocks
    private AgentService agentService;

    private Agent agent;

    @BeforeEach
    void setUp() {
        agent = new Agent();
        agent.setAgentId(1);
        agent.setName("John Doe");
        agent.setContactInfo("123456789");
        // Set policies to empty list
        agent.setPolicies(Collections.emptyList());
    }

    @Test
    void testAddAgent_Success() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.empty());
        when(agentRepository.save(agent)).thenReturn(agent);

        Agent savedAgent = agentService.addAgent(agent);

        verify(agentRepository).save(agent);
        assertEquals(agent, savedAgent);
    }

    @Test
    void testAddAgent_AgentAlreadyExists() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.of(agent));
        assertThrows(AgentException.class, () -> agentService.addAgent(agent));
    }

    @Test
    void testGetAllAgent_Success() {
        List<Agent> agents = List.of(agent);
        when(agentRepository.findAll()).thenReturn(agents);

        List<Agent> result = agentService.getAllAgent();
        assertEquals(agents, result);
    }

    @Test
    void testGetAllAgent_EmptyList() {
        when(agentRepository.findAll()).thenReturn(Collections.emptyList());
        assertThrows(AgentException.class, () -> agentService.getAllAgent());
    }

    @Test
    void testFindAgentById_Success() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.of(agent));
        Agent foundAgent = agentService.findAgentbyId(agent.getAgentId());
        assertEquals(agent, foundAgent);
    }

    @Test
    void testFindAgentById_NotFound() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.empty());
        assertThrows(AgentException.class, () -> agentService.findAgentbyId(agent.getAgentId()));
    }

    @Test
    void testUpdateAgent_Success() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.of(agent));
        when(agentRepository.save(agent)).thenReturn(agent);

        Agent updatedAgent = agentService.updateInsurance(agent);
        verify(agentRepository).save(agent);
        assertEquals(agent, updatedAgent);
    }

    @Test
    void testUpdateAgent_NotFound() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.empty());
        assertThrows(AgentException.class, () -> agentService.updateInsurance(agent));
    }

    @Test
    void testDeleteAgent_Success() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.of(agent));
        Agent deletedAgent = agentService.deleteAgent(agent.getAgentId());
        verify(agentRepository).deleteById(agent.getAgentId());
        assertEquals(agent, deletedAgent);
    }

    @Test
    void testDeleteAgent_NotFound() {
        when(agentRepository.findById(agent.getAgentId())).thenReturn(Optional.empty());
        assertThrows(AgentException.class, () -> agentService.deleteAgent(agent.getAgentId()));
    }
}


package com.example.demo;

import com.example.model.Agent;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Collections;

@SpringBootTest
public class AgentTest {

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testAgentEntity() {
        Agent agent = new Agent();
        agent.setAgentId(1234);
        agent.setName("Satish");
        agent.setContactInfo("123456789");
        // Set policies as empty list
        agent.setPolicies(Collections.emptyList());

        Assertions.assertEquals(1234, agent.getAgentId());
        Assertions.assertEquals("Satish", agent.getName());
        Assertions.assertEquals("123456789", agent.getContactInfo());
    }
}
