import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { AuthenticationService } from '../authentication.service';

@Component({
  selector: 'app-registration',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterLink],
  templateUrl: './registration.component.html',
  styleUrl: './registration.component.css'
})
export class RegistrationComponent implements OnInit {
  registrationForm!: FormGroup;
  selectedRole: string = 'customer';

  constructor(private formBuilder: FormBuilder, private authenticate: AuthenticationService, private router: Router) {}

  ngOnInit(): void {
    this.initializeForm();
  }

  initializeForm(): void {
    if (this.selectedRole === 'customer') {
      this.registrationForm = this.formBuilder.group({
        role: ['customer', Validators.required],
        id: ['', Validators.required],
        name: ['', Validators.required],
        email: ['', [Validators.required, Validators.email]],
        phoneNo: ['', Validators.required],
        password: ['', Validators.required],
        address: ['', Validators.required]
      });
    } else {
      this.registrationForm = this.formBuilder.group({
        role: ['agent', Validators.required],
        id: ['', Validators.required],
        name: ['', Validators.required],
        contactInfo: ['', Validators.required],
        password: ['', Validators.required],
        assignedPolicies: ['', Validators.required]
      });
    }
  }

  onRoleChange(): void {
    this.registrationForm.reset(); // Reset form to avoid errors
    this.initializeForm(); // Reinitialize with correct controls
  }

  onSubmit(): void {
    if (this.registrationForm.valid) {
      const registerMethod = this.selectedRole === 'customer' ? 'registerCustomer' : 'registerAgent';

      this.authenticate[registerMethod](this.registrationForm.value).subscribe({
        next: (data: any) => {
          localStorage.setItem('userData', JSON.stringify(data));
          console.log(`${this.selectedRole} registered successfully:`, data);
          this.router.navigate(['home']);
        },
        error: (err) => {
          console.error(`Error registering the ${this.selectedRole}:`, err);
        }
      });
    } else {
      console.log("Registration form is invalid");
    }
  }
}
